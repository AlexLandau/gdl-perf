apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
//    compile 'org.slf4j:slf4j-api:1.7.5'
//    testCompile "junit:junit:4.11"
    compile 'com.google.guava:guava:14.0.1'
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile files(
        //TODO: Add some exported jar from GGP-Base instead of an
        //implicit dependency (at least until GGP-Base gets
        //versioning and publishing)
        'lib/Alloy.jar', //currently needs to be user-provided
    
        'lib/palamedes/JavaProver.jar',
        'lib/palamedes/org.eclipse.palamedes.gdl.core_0.6.1.jar',
        'lib/palamedes/org.eclipse.palamedes.kif.core_0.6.1.jar',
        'lib/jocular/jocular-0.2.jar',
        'lib/eclipseProlog/eclipse.jar',
        //TODO: Clean up this jar before committing
        //ALSO export the sources
        //dependent jars should go in lib/rekkura (when applicable)
        'lib/rekkura/rekkura-1.0.0.jar'
    )
    compile 'org.apache.commons:commons-math3:3.5'

    //Alloy-specific dependencies
    compile 'net.sf.trove4j:trove4j:3.0.3'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

// Run perf tests with all games and all working engine types.
// This may take multiple days to complete.
// Skips tests that have already been completed.
task runPerfAll(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.alloyggp.perf.MissingEntriesPerfTestRunner'
}

// Run perf tests with a few games and a few engine types.
// This takes a few minutes.
// This is recommended for generating a small sample set of data when
// trying out analysis tools.
task runPerfSample(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.alloyggp.perf.SamplePerfTestRunner'
}

// Runs an analysis of performance test results that produces HTML
// output in the 'analyses' directory.
task perfAnalysis(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.alloyggp.perf.analysis.InterlinkedAnalysisWriter'
}

task zipAnalysis(type: Zip) {
    dependsOn perfAnalysis
    from 'analyses'
    baseName = 'perfAnalysis'
}

